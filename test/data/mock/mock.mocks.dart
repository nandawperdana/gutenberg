// Mocks generated by Mockito 5.4.2 from annotations
// in gutenberg/test/data/mock/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;

import 'package:gutenberg/data/base/remote/response/base_response.dart' as _i2;
import 'package:gutenberg/data/book/remote/response/book.dart' as _i5;
import 'package:gutenberg/data/book/remote/service/book_service.dart' as _i6;
import 'package:gutenberg/data/book/repository/book_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseResponse_0<T> extends _i1.SmartFake
    implements _i2.BaseResponse<T> {
  _FakeBaseResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepository extends _i1.Mock implements _i3.BookRepository {
  MockBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BaseResponse<_i5.Book>> fetchBooks({
    int? page = 1,
    String? keyword,
    String? ids,
    String? topic,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBooks,
          [],
          {
            #page: page,
            #keyword: keyword,
            #ids: ids,
            #topic: topic,
          },
        ),
        returnValue: _i4.Future<_i2.BaseResponse<_i5.Book>>.value(
            _FakeBaseResponse_0<_i5.Book>(
          this,
          Invocation.method(
            #fetchBooks,
            [],
            {
              #page: page,
              #keyword: keyword,
              #ids: ids,
              #topic: topic,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<_i5.Book>>);
}

/// A class which mocks [BookService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookService extends _i1.Mock implements _i6.BookService {
  MockBookService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BaseResponse<_i5.Book>> fetchBooks({
    int? page,
    String? keyword,
    String? ids,
    String? topic,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBooks,
          [],
          {
            #page: page,
            #keyword: keyword,
            #ids: ids,
            #topic: topic,
          },
        ),
        returnValue: _i4.Future<_i2.BaseResponse<_i5.Book>>.value(
            _FakeBaseResponse_0<_i5.Book>(
          this,
          Invocation.method(
            #fetchBooks,
            [],
            {
              #page: page,
              #keyword: keyword,
              #ids: ids,
              #topic: topic,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<_i5.Book>>);
}
